'use strict';

function Lexer(input) {
  let rawTokens = input
    .split(/(\s)/);

  const tokens = [];
  let line = 1;

  while (rawTokens.length) {
    const token = rawTokens.shift();
    const obj = {
      raw: token,
      type: undefined,
      line
    };

    // Eliminating newlines & counting lines
    if (token === "\n") {
      line++;
      continue;
    }

    // Eliminating whitespace
    if (!token.trim()) {
      continue;
    }

    // Classifying all other tokens
    if (/^[0-9]*\.{0,1}[0-9]+$/.test(token)) {
      obj.type = "number";
    } else if (/^\w+$/.test(token)) {
      obj.type = "word";
    } else {
      obj.type = "color";
    }

    if (!obj.type) {
      throw new Error(`Unexpected token @ line ${obj.line}.`);
    }

    tokens.push(obj);
  }

  return tokens;
}

function Ast(tokens) {
  const tree = [];

  function consume(amount = 1, subtract = true) {
    let items = [];

    if (subtract) {
      for (let i = 0; i < amount; i++) {
        items.push(tokens.shift());
      }
    } else {
      items = tokens.slice(0, amount);
    }

    return items;
  }

  while (tokens.length) {
    const token = tokens.shift();

    const expression = {
      type: undefined,
      args: [],
      // fill: "#ffffff",
      // stroke: "#000000",
      // weight: "4px"
    };

    if (token.type === "word") {
      switch (token.raw) {
        case "circle":
          expression.type = "circle";
          expression.args.push(...consume(3));

          // if (consume(1, false)[0].type === "color") {
          //   expression.args.push(consume());
          // }
          break;

        case "line":
          expression.type = "line";
          expression.args.push(...consume(4));
          break;

        default:
          throw new Error(`Unexpected identifier "${ token.raw }" @ line ${ token.line }.`);
      }
    }

    if (!expression.type) {
      throw new Error(`Syntax error @ line ${ token.line }.`);
    }

    tree.push(expression);
  }

  return tree;
}

function Transform(ast) {
  const transformed = ast.map(exp => { // expression
    const tex = { // transformed expression
      tagName: exp.type,
      attr: {
        stroke: "#000",
        fill: "#aaa",
        "stroke-width": 4
      }
    };

    switch (exp.type) {
      case "circle":
        tex.attr.cx = exp.args.shift().raw;
        tex.attr.cy = exp.args.shift().raw;
        tex.attr.r = exp.args.shift().raw;
        // !! color
        break;

      case "line":
        tex.attr.x1 = exp.args.shift().raw;
        tex.attr.y1 = exp.args.shift().raw;
        tex.attr.x2 = exp.args.shift().raw;
        tex.attr.y2 = exp.args.shift().raw;
        break;
    }

    return tex;
  });

  return transformed;
}

function Generate(transformed) {
  const elements = [];

  transformed.map(el => {
    const attributes = Object
      .entries(el.attr)
      .map(attribute => {
        return `${ attribute[0] }="${ attribute[1] }"`
      })
      .join("");

    elements.push(`<${el.tagName} ${attributes} />`);
  });

  return elements.join("");
}

function Compiler(input) {
  return (
    Generate(
      Transform(
        Ast(
          Lexer(
            input)))));
}

module.exports = Compiler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
